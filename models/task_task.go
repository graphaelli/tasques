// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskTask task task
// swagger:model task.Task
type TaskTask struct {

	// args
	Args interface{} `json:"args,omitempty"`

	// attempted
	// Required: true
	Attempted *int64 `json:"attempted"`

	// context
	Context interface{} `json:"context,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// kind
	// Required: true
	Kind *string `json:"kind"`

	// last claimed
	LastClaimed *TaskLastClaimed `json:"last_claimed,omitempty"`

	// last enqueued at
	// Required: true
	// Format: date-time
	LastEnqueuedAt *strfmt.DateTime `json:"last_enqueued_at"`

	// metadata
	// Required: true
	Metadata *CommonMetadata `json:"metadata"`

	// priority
	// Required: true
	Priority *int64 `json:"priority"`

	// processing timeout
	// Required: true
	ProcessingTimeout *string `json:"processing_timeout"`

	// queue
	// Required: true
	Queue *string `json:"queue"`

	// retry times
	// Required: true
	RetryTimes *int64 `json:"retry_times"`

	// run at
	// Required: true
	// Format: date-time
	RunAt *strfmt.DateTime `json:"run_at"`

	// state
	// Required: true
	State *string `json:"state"`
}

// Validate validates this task task
func (m *TaskTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttempted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastClaimed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastEnqueuedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessingTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetryTimes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskTask) validateAttempted(formats strfmt.Registry) error {

	if err := validate.Required("attempted", "body", m.Attempted); err != nil {
		return err
	}

	return nil
}

func (m *TaskTask) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TaskTask) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *TaskTask) validateLastClaimed(formats strfmt.Registry) error {

	if swag.IsZero(m.LastClaimed) { // not required
		return nil
	}

	if m.LastClaimed != nil {
		if err := m.LastClaimed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_claimed")
			}
			return err
		}
	}

	return nil
}

func (m *TaskTask) validateLastEnqueuedAt(formats strfmt.Registry) error {

	if err := validate.Required("last_enqueued_at", "body", m.LastEnqueuedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("last_enqueued_at", "body", "date-time", m.LastEnqueuedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskTask) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("metadata", "body", m.Metadata); err != nil {
		return err
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *TaskTask) validatePriority(formats strfmt.Registry) error {

	if err := validate.Required("priority", "body", m.Priority); err != nil {
		return err
	}

	return nil
}

func (m *TaskTask) validateProcessingTimeout(formats strfmt.Registry) error {

	if err := validate.Required("processing_timeout", "body", m.ProcessingTimeout); err != nil {
		return err
	}

	return nil
}

func (m *TaskTask) validateQueue(formats strfmt.Registry) error {

	if err := validate.Required("queue", "body", m.Queue); err != nil {
		return err
	}

	return nil
}

func (m *TaskTask) validateRetryTimes(formats strfmt.Registry) error {

	if err := validate.Required("retry_times", "body", m.RetryTimes); err != nil {
		return err
	}

	return nil
}

func (m *TaskTask) validateRunAt(formats strfmt.Registry) error {

	if err := validate.Required("run_at", "body", m.RunAt); err != nil {
		return err
	}

	if err := validate.FormatOf("run_at", "body", "date-time", m.RunAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskTask) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskTask) UnmarshalBinary(b []byte) error {
	var res TaskTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
