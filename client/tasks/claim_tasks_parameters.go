// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/lloydmeta/tasques/models"
)

// NewClaimTasksParams creates a new ClaimTasksParams object
// with the default values initialized.
func NewClaimTasksParams() *ClaimTasksParams {
	var ()
	return &ClaimTasksParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewClaimTasksParamsWithTimeout creates a new ClaimTasksParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewClaimTasksParamsWithTimeout(timeout time.Duration) *ClaimTasksParams {
	var ()
	return &ClaimTasksParams{

		timeout: timeout,
	}
}

// NewClaimTasksParamsWithContext creates a new ClaimTasksParams object
// with the default values initialized, and the ability to set a context for a request
func NewClaimTasksParamsWithContext(ctx context.Context) *ClaimTasksParams {
	var ()
	return &ClaimTasksParams{

		Context: ctx,
	}
}

// NewClaimTasksParamsWithHTTPClient creates a new ClaimTasksParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewClaimTasksParamsWithHTTPClient(client *http.Client) *ClaimTasksParams {
	var ()
	return &ClaimTasksParams{
		HTTPClient: client,
	}
}

/*ClaimTasksParams contains all the parameters to send to the API endpoint
for the claim tasks operation typically these are written to a http.Request
*/
type ClaimTasksParams struct {

	/*XTASQUESWORKERID
	  Worker ID

	*/
	XTASQUESWORKERID string
	/*Claim
	  The request body

	*/
	Claim *models.TaskClaim

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the claim tasks params
func (o *ClaimTasksParams) WithTimeout(timeout time.Duration) *ClaimTasksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the claim tasks params
func (o *ClaimTasksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the claim tasks params
func (o *ClaimTasksParams) WithContext(ctx context.Context) *ClaimTasksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the claim tasks params
func (o *ClaimTasksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the claim tasks params
func (o *ClaimTasksParams) WithHTTPClient(client *http.Client) *ClaimTasksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the claim tasks params
func (o *ClaimTasksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXTASQUESWORKERID adds the xTASQUESWORKERID to the claim tasks params
func (o *ClaimTasksParams) WithXTASQUESWORKERID(xTASQUESWORKERID string) *ClaimTasksParams {
	o.SetXTASQUESWORKERID(xTASQUESWORKERID)
	return o
}

// SetXTASQUESWORKERID adds the xTASQUESWORKERId to the claim tasks params
func (o *ClaimTasksParams) SetXTASQUESWORKERID(xTASQUESWORKERID string) {
	o.XTASQUESWORKERID = xTASQUESWORKERID
}

// WithClaim adds the claim to the claim tasks params
func (o *ClaimTasksParams) WithClaim(claim *models.TaskClaim) *ClaimTasksParams {
	o.SetClaim(claim)
	return o
}

// SetClaim adds the claim to the claim tasks params
func (o *ClaimTasksParams) SetClaim(claim *models.TaskClaim) {
	o.Claim = claim
}

// WriteToRequest writes these params to a swagger request
func (o *ClaimTasksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-TASQUES-WORKER-ID
	if err := r.SetHeaderParam("X-TASQUES-WORKER-ID", o.XTASQUESWORKERID); err != nil {
		return err
	}

	if o.Claim != nil {
		if err := r.SetBodyParam(o.Claim); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
