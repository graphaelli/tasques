// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/lloydmeta/tasques/models"
)

// UnclaimExistingTaskReader is a Reader for the UnclaimExistingTask structure.
type UnclaimExistingTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UnclaimExistingTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUnclaimExistingTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUnclaimExistingTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUnclaimExistingTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUnclaimExistingTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUnclaimExistingTaskOK creates a UnclaimExistingTaskOK with default headers values
func NewUnclaimExistingTaskOK() *UnclaimExistingTaskOK {
	return &UnclaimExistingTaskOK{}
}

/*UnclaimExistingTaskOK handles this case with default header values.

OK
*/
type UnclaimExistingTaskOK struct {
	Payload *models.TaskTask
}

func (o *UnclaimExistingTaskOK) Error() string {
	return fmt.Sprintf("[DELETE /tasques/claims/{queue}/{id}][%d] unclaimExistingTaskOK  %+v", 200, o.Payload)
}

func (o *UnclaimExistingTaskOK) GetPayload() *models.TaskTask {
	return o.Payload
}

func (o *UnclaimExistingTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskTask)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnclaimExistingTaskBadRequest creates a UnclaimExistingTaskBadRequest with default headers values
func NewUnclaimExistingTaskBadRequest() *UnclaimExistingTaskBadRequest {
	return &UnclaimExistingTaskBadRequest{}
}

/*UnclaimExistingTaskBadRequest handles this case with default header values.

The Task is not currently claimed
*/
type UnclaimExistingTaskBadRequest struct {
	Payload *models.CommonBody
}

func (o *UnclaimExistingTaskBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /tasques/claims/{queue}/{id}][%d] unclaimExistingTaskBadRequest  %+v", 400, o.Payload)
}

func (o *UnclaimExistingTaskBadRequest) GetPayload() *models.CommonBody {
	return o.Payload
}

func (o *UnclaimExistingTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnclaimExistingTaskForbidden creates a UnclaimExistingTaskForbidden with default headers values
func NewUnclaimExistingTaskForbidden() *UnclaimExistingTaskForbidden {
	return &UnclaimExistingTaskForbidden{}
}

/*UnclaimExistingTaskForbidden handles this case with default header values.

Worker currently has not claimed the Task
*/
type UnclaimExistingTaskForbidden struct {
	Payload *models.CommonBody
}

func (o *UnclaimExistingTaskForbidden) Error() string {
	return fmt.Sprintf("[DELETE /tasques/claims/{queue}/{id}][%d] unclaimExistingTaskForbidden  %+v", 403, o.Payload)
}

func (o *UnclaimExistingTaskForbidden) GetPayload() *models.CommonBody {
	return o.Payload
}

func (o *UnclaimExistingTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnclaimExistingTaskNotFound creates a UnclaimExistingTaskNotFound with default headers values
func NewUnclaimExistingTaskNotFound() *UnclaimExistingTaskNotFound {
	return &UnclaimExistingTaskNotFound{}
}

/*UnclaimExistingTaskNotFound handles this case with default header values.

Task does not exist
*/
type UnclaimExistingTaskNotFound struct {
	Payload *models.CommonBody
}

func (o *UnclaimExistingTaskNotFound) Error() string {
	return fmt.Sprintf("[DELETE /tasques/claims/{queue}/{id}][%d] unclaimExistingTaskNotFound  %+v", 404, o.Payload)
}

func (o *UnclaimExistingTaskNotFound) GetPayload() *models.CommonBody {
	return o.Payload
}

func (o *UnclaimExistingTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
