// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/lloydmeta/tasques/models"
)

// MarkClaimedTaskDoneReader is a Reader for the MarkClaimedTaskDone structure.
type MarkClaimedTaskDoneReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MarkClaimedTaskDoneReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMarkClaimedTaskDoneOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMarkClaimedTaskDoneBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMarkClaimedTaskDoneForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMarkClaimedTaskDoneNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMarkClaimedTaskDoneOK creates a MarkClaimedTaskDoneOK with default headers values
func NewMarkClaimedTaskDoneOK() *MarkClaimedTaskDoneOK {
	return &MarkClaimedTaskDoneOK{}
}

/*MarkClaimedTaskDoneOK handles this case with default header values.

OK
*/
type MarkClaimedTaskDoneOK struct {
	Payload *models.TaskTask
}

func (o *MarkClaimedTaskDoneOK) Error() string {
	return fmt.Sprintf("[PUT /tasques/done/{queue}/{id}][%d] markClaimedTaskDoneOK  %+v", 200, o.Payload)
}

func (o *MarkClaimedTaskDoneOK) GetPayload() *models.TaskTask {
	return o.Payload
}

func (o *MarkClaimedTaskDoneOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskTask)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkClaimedTaskDoneBadRequest creates a MarkClaimedTaskDoneBadRequest with default headers values
func NewMarkClaimedTaskDoneBadRequest() *MarkClaimedTaskDoneBadRequest {
	return &MarkClaimedTaskDoneBadRequest{}
}

/*MarkClaimedTaskDoneBadRequest handles this case with default header values.

The Task is not currently claimed
*/
type MarkClaimedTaskDoneBadRequest struct {
	Payload *models.CommonBody
}

func (o *MarkClaimedTaskDoneBadRequest) Error() string {
	return fmt.Sprintf("[PUT /tasques/done/{queue}/{id}][%d] markClaimedTaskDoneBadRequest  %+v", 400, o.Payload)
}

func (o *MarkClaimedTaskDoneBadRequest) GetPayload() *models.CommonBody {
	return o.Payload
}

func (o *MarkClaimedTaskDoneBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkClaimedTaskDoneForbidden creates a MarkClaimedTaskDoneForbidden with default headers values
func NewMarkClaimedTaskDoneForbidden() *MarkClaimedTaskDoneForbidden {
	return &MarkClaimedTaskDoneForbidden{}
}

/*MarkClaimedTaskDoneForbidden handles this case with default header values.

Worker currently has not claimed the Task
*/
type MarkClaimedTaskDoneForbidden struct {
	Payload *models.CommonBody
}

func (o *MarkClaimedTaskDoneForbidden) Error() string {
	return fmt.Sprintf("[PUT /tasques/done/{queue}/{id}][%d] markClaimedTaskDoneForbidden  %+v", 403, o.Payload)
}

func (o *MarkClaimedTaskDoneForbidden) GetPayload() *models.CommonBody {
	return o.Payload
}

func (o *MarkClaimedTaskDoneForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkClaimedTaskDoneNotFound creates a MarkClaimedTaskDoneNotFound with default headers values
func NewMarkClaimedTaskDoneNotFound() *MarkClaimedTaskDoneNotFound {
	return &MarkClaimedTaskDoneNotFound{}
}

/*MarkClaimedTaskDoneNotFound handles this case with default header values.

Task does not exist
*/
type MarkClaimedTaskDoneNotFound struct {
	Payload *models.CommonBody
}

func (o *MarkClaimedTaskDoneNotFound) Error() string {
	return fmt.Sprintf("[PUT /tasques/done/{queue}/{id}][%d] markClaimedTaskDoneNotFound  %+v", 404, o.Payload)
}

func (o *MarkClaimedTaskDoneNotFound) GetPayload() *models.CommonBody {
	return o.Payload
}

func (o *MarkClaimedTaskDoneNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
