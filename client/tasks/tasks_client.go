// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ClaimTasks(params *ClaimTasksParams) (*ClaimTasksOK, error)

	CreateTask(params *CreateTaskParams) (*CreateTaskCreated, error)

	GetExistingTask(params *GetExistingTaskParams) (*GetExistingTaskOK, error)

	MarkClaimedTaskDone(params *MarkClaimedTaskDoneParams) (*MarkClaimedTaskDoneOK, error)

	MarkClaimedTaskFailed(params *MarkClaimedTaskFailedParams) (*MarkClaimedTaskFailedOK, error)

	ReportOnClaimedTask(params *ReportOnClaimedTaskParams) (*ReportOnClaimedTaskOK, error)

	UnclaimExistingTask(params *UnclaimExistingTaskParams) (*UnclaimExistingTaskOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ClaimTasks claims a number of tasks

  Claims a number of existing Tasks.
*/
func (a *Client) ClaimTasks(params *ClaimTasksParams) (*ClaimTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClaimTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "claim-tasks",
		Method:             "POST",
		PathPattern:        "/tasques/claims",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClaimTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClaimTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for claim-tasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTask adds a new task

  Creates a new Task
*/
func (a *Client) CreateTask(params *CreateTaskParams) (*CreateTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create-task",
		Method:             "POST",
		PathPattern:        "/tasques",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTaskCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create-task: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetExistingTask gets a task

  Retrieves a persisted Task
*/
func (a *Client) GetExistingTask(params *GetExistingTaskParams) (*GetExistingTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExistingTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-existing-task",
		Method:             "GET",
		PathPattern:        "/tasques/{queue}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetExistingTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExistingTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-existing-task: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MarkClaimedTaskDone marks task as done

  Marks a claimed Task as done.
*/
func (a *Client) MarkClaimedTaskDone(params *MarkClaimedTaskDoneParams) (*MarkClaimedTaskDoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarkClaimedTaskDoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "mark-claimed-task-done",
		Method:             "PUT",
		PathPattern:        "/tasques/done/{queue}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MarkClaimedTaskDoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MarkClaimedTaskDoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mark-claimed-task-done: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MarkClaimedTaskFailed marks task as failed

  Marks a claimed Task as failed.
*/
func (a *Client) MarkClaimedTaskFailed(params *MarkClaimedTaskFailedParams) (*MarkClaimedTaskFailedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarkClaimedTaskFailedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "mark-claimed-task-failed",
		Method:             "PUT",
		PathPattern:        "/tasques/failed/{queue}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MarkClaimedTaskFailedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MarkClaimedTaskFailedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mark-claimed-task-failed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReportOnClaimedTask reports on a task

  Reports in on a claimed Task.
*/
func (a *Client) ReportOnClaimedTask(params *ReportOnClaimedTaskParams) (*ReportOnClaimedTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportOnClaimedTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "report-on-claimed-task",
		Method:             "PUT",
		PathPattern:        "/tasques/reports/{queue}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReportOnClaimedTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportOnClaimedTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for report-on-claimed-task: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UnclaimExistingTask unclaims a task

  Unclaims a claimed Task.
*/
func (a *Client) UnclaimExistingTask(params *UnclaimExistingTaskParams) (*UnclaimExistingTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnclaimExistingTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unclaim-existing-task",
		Method:             "DELETE",
		PathPattern:        "/tasques/claims/{queue}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnclaimExistingTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnclaimExistingTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unclaim-existing-task: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
