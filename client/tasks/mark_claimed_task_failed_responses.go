// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/lloydmeta/tasques/models"
)

// MarkClaimedTaskFailedReader is a Reader for the MarkClaimedTaskFailed structure.
type MarkClaimedTaskFailedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MarkClaimedTaskFailedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMarkClaimedTaskFailedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMarkClaimedTaskFailedBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMarkClaimedTaskFailedForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMarkClaimedTaskFailedNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMarkClaimedTaskFailedOK creates a MarkClaimedTaskFailedOK with default headers values
func NewMarkClaimedTaskFailedOK() *MarkClaimedTaskFailedOK {
	return &MarkClaimedTaskFailedOK{}
}

/*MarkClaimedTaskFailedOK handles this case with default header values.

OK
*/
type MarkClaimedTaskFailedOK struct {
	Payload *models.TaskTask
}

func (o *MarkClaimedTaskFailedOK) Error() string {
	return fmt.Sprintf("[PUT /tasques/failed/{queue}/{id}][%d] markClaimedTaskFailedOK  %+v", 200, o.Payload)
}

func (o *MarkClaimedTaskFailedOK) GetPayload() *models.TaskTask {
	return o.Payload
}

func (o *MarkClaimedTaskFailedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskTask)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkClaimedTaskFailedBadRequest creates a MarkClaimedTaskFailedBadRequest with default headers values
func NewMarkClaimedTaskFailedBadRequest() *MarkClaimedTaskFailedBadRequest {
	return &MarkClaimedTaskFailedBadRequest{}
}

/*MarkClaimedTaskFailedBadRequest handles this case with default header values.

The Task is not currently claimed
*/
type MarkClaimedTaskFailedBadRequest struct {
	Payload *models.CommonBody
}

func (o *MarkClaimedTaskFailedBadRequest) Error() string {
	return fmt.Sprintf("[PUT /tasques/failed/{queue}/{id}][%d] markClaimedTaskFailedBadRequest  %+v", 400, o.Payload)
}

func (o *MarkClaimedTaskFailedBadRequest) GetPayload() *models.CommonBody {
	return o.Payload
}

func (o *MarkClaimedTaskFailedBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkClaimedTaskFailedForbidden creates a MarkClaimedTaskFailedForbidden with default headers values
func NewMarkClaimedTaskFailedForbidden() *MarkClaimedTaskFailedForbidden {
	return &MarkClaimedTaskFailedForbidden{}
}

/*MarkClaimedTaskFailedForbidden handles this case with default header values.

Worker currently has not claimed the Task
*/
type MarkClaimedTaskFailedForbidden struct {
	Payload *models.CommonBody
}

func (o *MarkClaimedTaskFailedForbidden) Error() string {
	return fmt.Sprintf("[PUT /tasques/failed/{queue}/{id}][%d] markClaimedTaskFailedForbidden  %+v", 403, o.Payload)
}

func (o *MarkClaimedTaskFailedForbidden) GetPayload() *models.CommonBody {
	return o.Payload
}

func (o *MarkClaimedTaskFailedForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkClaimedTaskFailedNotFound creates a MarkClaimedTaskFailedNotFound with default headers values
func NewMarkClaimedTaskFailedNotFound() *MarkClaimedTaskFailedNotFound {
	return &MarkClaimedTaskFailedNotFound{}
}

/*MarkClaimedTaskFailedNotFound handles this case with default header values.

Task does not exist
*/
type MarkClaimedTaskFailedNotFound struct {
	Payload *models.CommonBody
}

func (o *MarkClaimedTaskFailedNotFound) Error() string {
	return fmt.Sprintf("[PUT /tasques/failed/{queue}/{id}][%d] markClaimedTaskFailedNotFound  %+v", 404, o.Payload)
}

func (o *MarkClaimedTaskFailedNotFound) GetPayload() *models.CommonBody {
	return o.Payload
}

func (o *MarkClaimedTaskFailedNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
