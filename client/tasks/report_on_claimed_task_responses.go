// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/lloydmeta/tasques/models"
)

// ReportOnClaimedTaskReader is a Reader for the ReportOnClaimedTask structure.
type ReportOnClaimedTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReportOnClaimedTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReportOnClaimedTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReportOnClaimedTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReportOnClaimedTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReportOnClaimedTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReportOnClaimedTaskOK creates a ReportOnClaimedTaskOK with default headers values
func NewReportOnClaimedTaskOK() *ReportOnClaimedTaskOK {
	return &ReportOnClaimedTaskOK{}
}

/*ReportOnClaimedTaskOK handles this case with default header values.

OK
*/
type ReportOnClaimedTaskOK struct {
	Payload *models.TaskTask
}

func (o *ReportOnClaimedTaskOK) Error() string {
	return fmt.Sprintf("[PUT /tasques/reports/{queue}/{id}][%d] reportOnClaimedTaskOK  %+v", 200, o.Payload)
}

func (o *ReportOnClaimedTaskOK) GetPayload() *models.TaskTask {
	return o.Payload
}

func (o *ReportOnClaimedTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskTask)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportOnClaimedTaskBadRequest creates a ReportOnClaimedTaskBadRequest with default headers values
func NewReportOnClaimedTaskBadRequest() *ReportOnClaimedTaskBadRequest {
	return &ReportOnClaimedTaskBadRequest{}
}

/*ReportOnClaimedTaskBadRequest handles this case with default header values.

The Task is not currently claimed
*/
type ReportOnClaimedTaskBadRequest struct {
	Payload *models.CommonBody
}

func (o *ReportOnClaimedTaskBadRequest) Error() string {
	return fmt.Sprintf("[PUT /tasques/reports/{queue}/{id}][%d] reportOnClaimedTaskBadRequest  %+v", 400, o.Payload)
}

func (o *ReportOnClaimedTaskBadRequest) GetPayload() *models.CommonBody {
	return o.Payload
}

func (o *ReportOnClaimedTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportOnClaimedTaskForbidden creates a ReportOnClaimedTaskForbidden with default headers values
func NewReportOnClaimedTaskForbidden() *ReportOnClaimedTaskForbidden {
	return &ReportOnClaimedTaskForbidden{}
}

/*ReportOnClaimedTaskForbidden handles this case with default header values.

Worker currently has not claimed the Task
*/
type ReportOnClaimedTaskForbidden struct {
	Payload *models.CommonBody
}

func (o *ReportOnClaimedTaskForbidden) Error() string {
	return fmt.Sprintf("[PUT /tasques/reports/{queue}/{id}][%d] reportOnClaimedTaskForbidden  %+v", 403, o.Payload)
}

func (o *ReportOnClaimedTaskForbidden) GetPayload() *models.CommonBody {
	return o.Payload
}

func (o *ReportOnClaimedTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportOnClaimedTaskNotFound creates a ReportOnClaimedTaskNotFound with default headers values
func NewReportOnClaimedTaskNotFound() *ReportOnClaimedTaskNotFound {
	return &ReportOnClaimedTaskNotFound{}
}

/*ReportOnClaimedTaskNotFound handles this case with default header values.

Task does not exist
*/
type ReportOnClaimedTaskNotFound struct {
	Payload *models.CommonBody
}

func (o *ReportOnClaimedTaskNotFound) Error() string {
	return fmt.Sprintf("[PUT /tasques/reports/{queue}/{id}][%d] reportOnClaimedTaskNotFound  %+v", 404, o.Payload)
}

func (o *ReportOnClaimedTaskNotFound) GetPayload() *models.CommonBody {
	return o.Payload
}

func (o *ReportOnClaimedTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
