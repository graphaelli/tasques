/*
 * Tasques API
 *
 * A Task queue backed by Elasticsearch
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct TasksApiClient {
    // NOTE this was modified to get rid of the RC that comes with swagger codegen.
    configuration: configuration::Configuration,
}

impl TasksApiClient {
    pub fn new(configuration: configuration::Configuration) -> TasksApiClient {
        TasksApiClient { configuration }
    }
}

pub trait TasksApi {
    fn claim_tasks(
        &self,
        X_TASQUES_WORKER_ID: &str,
        claim: crate::models::TaskClaim,
    ) -> Result<Vec<crate::models::TaskTask>, Error>;
    fn create_task(
        &self,
        new_task: crate::models::TaskNewTask,
    ) -> Result<crate::models::TaskTask, Error>;
    fn get_existing_task(&self, queue: &str, id: &str) -> Result<crate::models::TaskTask, Error>;
    fn mark_claimed_task_done(
        &self,
        queue: &str,
        id: &str,
        X_TASQUES_WORKER_ID: &str,
        success: crate::models::TaskSuccess,
    ) -> Result<crate::models::TaskTask, Error>;
    fn mark_claimed_task_failed(
        &self,
        queue: &str,
        id: &str,
        X_TASQUES_WORKER_ID: &str,
        failure: crate::models::TaskFailure,
    ) -> Result<crate::models::TaskTask, Error>;
    fn report_on_claimed_task(
        &self,
        queue: &str,
        id: &str,
        X_TASQUES_WORKER_ID: &str,
        new_report: crate::models::TaskNewReport,
    ) -> Result<crate::models::TaskTask, Error>;
    fn unclaim_existing_task(
        &self,
        queue: &str,
        id: &str,
        X_TASQUES_WORKER_ID: &str,
    ) -> Result<crate::models::TaskTask, Error>;
}

impl TasksApi for TasksApiClient {
    fn claim_tasks(
        &self,
        X_TASQUES_WORKER_ID: &str,
        claim: crate::models::TaskClaim,
    ) -> Result<Vec<crate::models::TaskTask>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tasques/claims", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("X-TASQUES-WORKER-ID", X_TASQUES_WORKER_ID.to_string());
        req_builder = req_builder.json(&claim);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_task(
        &self,
        new_task: crate::models::TaskNewTask,
    ) -> Result<crate::models::TaskTask, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/tasques", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&new_task);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_existing_task(&self, queue: &str, id: &str) -> Result<crate::models::TaskTask, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/tasques/{queue}/{id}",
            configuration.base_path,
            queue = crate::apis::urlencode(queue),
            id = crate::apis::urlencode(id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn mark_claimed_task_done(
        &self,
        queue: &str,
        id: &str,
        X_TASQUES_WORKER_ID: &str,
        success: crate::models::TaskSuccess,
    ) -> Result<crate::models::TaskTask, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/tasques/done/{queue}/{id}",
            configuration.base_path,
            queue = crate::apis::urlencode(queue),
            id = crate::apis::urlencode(id)
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("X-TASQUES-WORKER-ID", X_TASQUES_WORKER_ID.to_string());
        req_builder = req_builder.json(&success);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn mark_claimed_task_failed(
        &self,
        queue: &str,
        id: &str,
        X_TASQUES_WORKER_ID: &str,
        failure: crate::models::TaskFailure,
    ) -> Result<crate::models::TaskTask, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/tasques/failed/{queue}/{id}",
            configuration.base_path,
            queue = crate::apis::urlencode(queue),
            id = crate::apis::urlencode(id)
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("X-TASQUES-WORKER-ID", X_TASQUES_WORKER_ID.to_string());
        req_builder = req_builder.json(&failure);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn report_on_claimed_task(
        &self,
        queue: &str,
        id: &str,
        X_TASQUES_WORKER_ID: &str,
        new_report: crate::models::TaskNewReport,
    ) -> Result<crate::models::TaskTask, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/tasques/reports/{queue}/{id}",
            configuration.base_path,
            queue = crate::apis::urlencode(queue),
            id = crate::apis::urlencode(id)
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("X-TASQUES-WORKER-ID", X_TASQUES_WORKER_ID.to_string());
        req_builder = req_builder.json(&new_report);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn unclaim_existing_task(
        &self,
        queue: &str,
        id: &str,
        X_TASQUES_WORKER_ID: &str,
    ) -> Result<crate::models::TaskTask, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/tasques/claims/{queue}/{id}",
            configuration.base_path,
            queue = crate::apis::urlencode(queue),
            id = crate::apis::urlencode(id)
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("X-TASQUES-WORKER-ID", X_TASQUES_WORKER_ID.to_string());

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
