/*
 * Tasques API
 *
 * A Task queue backed by Elasticsearch
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskTask {
    #[serde(rename = "args", skip_serializing_if = "Option::is_none")]
    pub args: Option<serde_json::Value>,
    #[serde(rename = "attempted")]
    pub attempted: i32,
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<serde_json::Value>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "kind")]
    pub kind: String,
    #[serde(rename = "last_claimed", skip_serializing_if = "Option::is_none")]
    pub last_claimed: Option<crate::models::TaskLastClaimed>,
    #[serde(rename = "last_enqueued_at")]
    pub last_enqueued_at: String,
    #[serde(rename = "metadata")]
    pub metadata: crate::models::CommonMetadata,
    #[serde(rename = "priority")]
    pub priority: i32,
    #[serde(rename = "processing_timeout")]
    pub processing_timeout: String,
    #[serde(rename = "queue")]
    pub queue: String,
    #[serde(rename = "retry_times")]
    pub retry_times: i32,
    #[serde(rename = "run_at")]
    pub run_at: String,
    #[serde(rename = "state")]
    pub state: String,
}

impl TaskTask {
    pub fn new(
        attempted: i32,
        id: String,
        kind: String,
        last_enqueued_at: String,
        metadata: crate::models::CommonMetadata,
        priority: i32,
        processing_timeout: String,
        queue: String,
        retry_times: i32,
        run_at: String,
        state: String,
    ) -> TaskTask {
        TaskTask {
            args: None,
            attempted,
            context: None,
            id,
            kind,
            last_claimed: None,
            last_enqueued_at,
            metadata,
            priority,
            processing_timeout,
            queue,
            retry_times,
            run_at,
            state,
        }
    }
}
