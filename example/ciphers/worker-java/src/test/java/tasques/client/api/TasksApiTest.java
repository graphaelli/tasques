/*
 * Tasques API
 * A Task queue backed by Elasticsearch
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package tasques.client.api;

import tasques.client.ApiException;
import tasques.client.models.CommonBody;
import tasques.client.models.TaskClaim;
import tasques.client.models.TaskFailure;
import tasques.client.models.TaskNewReport;
import tasques.client.models.TaskNewTask;
import tasques.client.models.TaskSuccess;
import tasques.client.models.TaskTask;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TasksApi
 */
@Ignore
public class TasksApiTest {

    private final TasksApi api = new TasksApi();

    
    /**
     * Claims a number of Tasks
     *
     * Claims a number of existing Tasks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void claimTasksTest() throws ApiException {
        String X_TASQUES_WORKER_ID = null;
        TaskClaim claim = null;
        List<TaskTask> response = api.claimTasks(X_TASQUES_WORKER_ID, claim);

        // TODO: test validations
    }
    
    /**
     * Add a new Task
     *
     * Creates a new Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTaskTest() throws ApiException {
        TaskNewTask newTask = null;
        TaskTask response = api.createTask(newTask);

        // TODO: test validations
    }
    
    /**
     * Get a Task
     *
     * Retrieves a persisted Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExistingTaskTest() throws ApiException {
        String queue = null;
        String id = null;
        TaskTask response = api.getExistingTask(queue, id);

        // TODO: test validations
    }
    
    /**
     * Mark Task as Done
     *
     * Marks a claimed Task as done.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markClaimedTaskDoneTest() throws ApiException {
        String queue = null;
        String id = null;
        String X_TASQUES_WORKER_ID = null;
        TaskSuccess success = null;
        TaskTask response = api.markClaimedTaskDone(queue, id, X_TASQUES_WORKER_ID, success);

        // TODO: test validations
    }
    
    /**
     * Mark Task as Failed
     *
     * Marks a claimed Task as failed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markClaimedTaskFailedTest() throws ApiException {
        String queue = null;
        String id = null;
        String X_TASQUES_WORKER_ID = null;
        TaskFailure failure = null;
        TaskTask response = api.markClaimedTaskFailed(queue, id, X_TASQUES_WORKER_ID, failure);

        // TODO: test validations
    }
    
    /**
     * Reports on a Task
     *
     * Reports in on a claimed Task.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportOnClaimedTaskTest() throws ApiException {
        String queue = null;
        String id = null;
        String X_TASQUES_WORKER_ID = null;
        TaskNewReport newReport = null;
        TaskTask response = api.reportOnClaimedTask(queue, id, X_TASQUES_WORKER_ID, newReport);

        // TODO: test validations
    }
    
    /**
     * Unclaims a Task
     *
     * Unclaims a claimed Task.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unclaimExistingTaskTest() throws ApiException {
        String queue = null;
        String id = null;
        String X_TASQUES_WORKER_ID = null;
        TaskTask response = api.unclaimExistingTask(queue, id, X_TASQUES_WORKER_ID);

        // TODO: test validations
    }
    
}
