/*
 * Tasques API
 * A Task queue backed by Elasticsearch
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package tasques.client.api;

import tasques.client.ApiCallback;
import tasques.client.ApiClient;
import tasques.client.ApiException;
import tasques.client.ApiResponse;
import tasques.client.Configuration;
import tasques.client.Pair;
import tasques.client.ProgressRequestBody;
import tasques.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import tasques.client.models.CommonBody;
import tasques.client.models.TaskClaim;
import tasques.client.models.TaskFailure;
import tasques.client.models.TaskNewReport;
import tasques.client.models.TaskNewTask;
import tasques.client.models.TaskSuccess;
import tasques.client.models.TaskTask;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksApi {
    private ApiClient localVarApiClient;

    public TasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for claimTasks
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param claim The request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call claimTasksCall(String X_TASQUES_WORKER_ID, TaskClaim claim, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = claim;

        // create path and map variables
        String localVarPath = "/tasques/claims";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_TASQUES_WORKER_ID != null) {
            localVarHeaderParams.put("X-TASQUES-WORKER-ID", localVarApiClient.parameterToString(X_TASQUES_WORKER_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call claimTasksValidateBeforeCall(String X_TASQUES_WORKER_ID, TaskClaim claim, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'X_TASQUES_WORKER_ID' is set
        if (X_TASQUES_WORKER_ID == null) {
            throw new ApiException("Missing the required parameter 'X_TASQUES_WORKER_ID' when calling claimTasks(Async)");
        }
        
        // verify the required parameter 'claim' is set
        if (claim == null) {
            throw new ApiException("Missing the required parameter 'claim' when calling claimTasks(Async)");
        }
        

        okhttp3.Call localVarCall = claimTasksCall(X_TASQUES_WORKER_ID, claim, _callback);
        return localVarCall;

    }

    /**
     * Claims a number of Tasks
     * Claims a number of existing Tasks.
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param claim The request body (required)
     * @return List&lt;TaskTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TaskTask> claimTasks(String X_TASQUES_WORKER_ID, TaskClaim claim) throws ApiException {
        ApiResponse<List<TaskTask>> localVarResp = claimTasksWithHttpInfo(X_TASQUES_WORKER_ID, claim);
        return localVarResp.getData();
    }

    /**
     * Claims a number of Tasks
     * Claims a number of existing Tasks.
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param claim The request body (required)
     * @return ApiResponse&lt;List&lt;TaskTask&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TaskTask>> claimTasksWithHttpInfo(String X_TASQUES_WORKER_ID, TaskClaim claim) throws ApiException {
        okhttp3.Call localVarCall = claimTasksValidateBeforeCall(X_TASQUES_WORKER_ID, claim, null);
        Type localVarReturnType = new TypeToken<List<TaskTask>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Claims a number of Tasks (asynchronously)
     * Claims a number of existing Tasks.
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param claim The request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call claimTasksAsync(String X_TASQUES_WORKER_ID, TaskClaim claim, final ApiCallback<List<TaskTask>> _callback) throws ApiException {

        okhttp3.Call localVarCall = claimTasksValidateBeforeCall(X_TASQUES_WORKER_ID, claim, _callback);
        Type localVarReturnType = new TypeToken<List<TaskTask>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTask
     * @param newTask The request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskCall(TaskNewTask newTask, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = newTask;

        // create path and map variables
        String localVarPath = "/tasques";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaskValidateBeforeCall(TaskNewTask newTask, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'newTask' is set
        if (newTask == null) {
            throw new ApiException("Missing the required parameter 'newTask' when calling createTask(Async)");
        }
        

        okhttp3.Call localVarCall = createTaskCall(newTask, _callback);
        return localVarCall;

    }

    /**
     * Add a new Task
     * Creates a new Task
     * @param newTask The request body (required)
     * @return TaskTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON </td><td>  -  </td></tr>
     </table>
     */
    public TaskTask createTask(TaskNewTask newTask) throws ApiException {
        ApiResponse<TaskTask> localVarResp = createTaskWithHttpInfo(newTask);
        return localVarResp.getData();
    }

    /**
     * Add a new Task
     * Creates a new Task
     * @param newTask The request body (required)
     * @return ApiResponse&lt;TaskTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskTask> createTaskWithHttpInfo(TaskNewTask newTask) throws ApiException {
        okhttp3.Call localVarCall = createTaskValidateBeforeCall(newTask, null);
        Type localVarReturnType = new TypeToken<TaskTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new Task (asynchronously)
     * Creates a new Task
     * @param newTask The request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskAsync(TaskNewTask newTask, final ApiCallback<TaskTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaskValidateBeforeCall(newTask, _callback);
        Type localVarReturnType = new TypeToken<TaskTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExistingTask
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExistingTaskCall(String queue, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasques/{queue}/{id}"
            .replaceAll("\\{" + "queue" + "\\}", localVarApiClient.escapeString(queue.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExistingTaskValidateBeforeCall(String queue, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'queue' is set
        if (queue == null) {
            throw new ApiException("Missing the required parameter 'queue' when calling getExistingTask(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getExistingTask(Async)");
        }
        

        okhttp3.Call localVarCall = getExistingTaskCall(queue, id, _callback);
        return localVarCall;

    }

    /**
     * Get a Task
     * Retrieves a persisted Task
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @return TaskTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public TaskTask getExistingTask(String queue, String id) throws ApiException {
        ApiResponse<TaskTask> localVarResp = getExistingTaskWithHttpInfo(queue, id);
        return localVarResp.getData();
    }

    /**
     * Get a Task
     * Retrieves a persisted Task
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @return ApiResponse&lt;TaskTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskTask> getExistingTaskWithHttpInfo(String queue, String id) throws ApiException {
        okhttp3.Call localVarCall = getExistingTaskValidateBeforeCall(queue, id, null);
        Type localVarReturnType = new TypeToken<TaskTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Task (asynchronously)
     * Retrieves a persisted Task
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExistingTaskAsync(String queue, String id, final ApiCallback<TaskTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExistingTaskValidateBeforeCall(queue, id, _callback);
        Type localVarReturnType = new TypeToken<TaskTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for markClaimedTaskDone
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param success The request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Task is not currently claimed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Worker currently has not claimed the Task </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markClaimedTaskDoneCall(String queue, String id, String X_TASQUES_WORKER_ID, TaskSuccess success, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = success;

        // create path and map variables
        String localVarPath = "/tasques/done/{queue}/{id}"
            .replaceAll("\\{" + "queue" + "\\}", localVarApiClient.escapeString(queue.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_TASQUES_WORKER_ID != null) {
            localVarHeaderParams.put("X-TASQUES-WORKER-ID", localVarApiClient.parameterToString(X_TASQUES_WORKER_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markClaimedTaskDoneValidateBeforeCall(String queue, String id, String X_TASQUES_WORKER_ID, TaskSuccess success, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'queue' is set
        if (queue == null) {
            throw new ApiException("Missing the required parameter 'queue' when calling markClaimedTaskDone(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling markClaimedTaskDone(Async)");
        }
        
        // verify the required parameter 'X_TASQUES_WORKER_ID' is set
        if (X_TASQUES_WORKER_ID == null) {
            throw new ApiException("Missing the required parameter 'X_TASQUES_WORKER_ID' when calling markClaimedTaskDone(Async)");
        }
        
        // verify the required parameter 'success' is set
        if (success == null) {
            throw new ApiException("Missing the required parameter 'success' when calling markClaimedTaskDone(Async)");
        }
        

        okhttp3.Call localVarCall = markClaimedTaskDoneCall(queue, id, X_TASQUES_WORKER_ID, success, _callback);
        return localVarCall;

    }

    /**
     * Mark Task as Done
     * Marks a claimed Task as done.
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param success The request body (required)
     * @return TaskTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Task is not currently claimed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Worker currently has not claimed the Task </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public TaskTask markClaimedTaskDone(String queue, String id, String X_TASQUES_WORKER_ID, TaskSuccess success) throws ApiException {
        ApiResponse<TaskTask> localVarResp = markClaimedTaskDoneWithHttpInfo(queue, id, X_TASQUES_WORKER_ID, success);
        return localVarResp.getData();
    }

    /**
     * Mark Task as Done
     * Marks a claimed Task as done.
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param success The request body (required)
     * @return ApiResponse&lt;TaskTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Task is not currently claimed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Worker currently has not claimed the Task </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskTask> markClaimedTaskDoneWithHttpInfo(String queue, String id, String X_TASQUES_WORKER_ID, TaskSuccess success) throws ApiException {
        okhttp3.Call localVarCall = markClaimedTaskDoneValidateBeforeCall(queue, id, X_TASQUES_WORKER_ID, success, null);
        Type localVarReturnType = new TypeToken<TaskTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark Task as Done (asynchronously)
     * Marks a claimed Task as done.
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param success The request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Task is not currently claimed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Worker currently has not claimed the Task </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markClaimedTaskDoneAsync(String queue, String id, String X_TASQUES_WORKER_ID, TaskSuccess success, final ApiCallback<TaskTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = markClaimedTaskDoneValidateBeforeCall(queue, id, X_TASQUES_WORKER_ID, success, _callback);
        Type localVarReturnType = new TypeToken<TaskTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for markClaimedTaskFailed
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param failure The request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Task is not currently claimed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Worker currently has not claimed the Task </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markClaimedTaskFailedCall(String queue, String id, String X_TASQUES_WORKER_ID, TaskFailure failure, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = failure;

        // create path and map variables
        String localVarPath = "/tasques/failed/{queue}/{id}"
            .replaceAll("\\{" + "queue" + "\\}", localVarApiClient.escapeString(queue.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_TASQUES_WORKER_ID != null) {
            localVarHeaderParams.put("X-TASQUES-WORKER-ID", localVarApiClient.parameterToString(X_TASQUES_WORKER_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markClaimedTaskFailedValidateBeforeCall(String queue, String id, String X_TASQUES_WORKER_ID, TaskFailure failure, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'queue' is set
        if (queue == null) {
            throw new ApiException("Missing the required parameter 'queue' when calling markClaimedTaskFailed(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling markClaimedTaskFailed(Async)");
        }
        
        // verify the required parameter 'X_TASQUES_WORKER_ID' is set
        if (X_TASQUES_WORKER_ID == null) {
            throw new ApiException("Missing the required parameter 'X_TASQUES_WORKER_ID' when calling markClaimedTaskFailed(Async)");
        }
        
        // verify the required parameter 'failure' is set
        if (failure == null) {
            throw new ApiException("Missing the required parameter 'failure' when calling markClaimedTaskFailed(Async)");
        }
        

        okhttp3.Call localVarCall = markClaimedTaskFailedCall(queue, id, X_TASQUES_WORKER_ID, failure, _callback);
        return localVarCall;

    }

    /**
     * Mark Task as Failed
     * Marks a claimed Task as failed.
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param failure The request body (required)
     * @return TaskTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Task is not currently claimed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Worker currently has not claimed the Task </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public TaskTask markClaimedTaskFailed(String queue, String id, String X_TASQUES_WORKER_ID, TaskFailure failure) throws ApiException {
        ApiResponse<TaskTask> localVarResp = markClaimedTaskFailedWithHttpInfo(queue, id, X_TASQUES_WORKER_ID, failure);
        return localVarResp.getData();
    }

    /**
     * Mark Task as Failed
     * Marks a claimed Task as failed.
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param failure The request body (required)
     * @return ApiResponse&lt;TaskTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Task is not currently claimed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Worker currently has not claimed the Task </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskTask> markClaimedTaskFailedWithHttpInfo(String queue, String id, String X_TASQUES_WORKER_ID, TaskFailure failure) throws ApiException {
        okhttp3.Call localVarCall = markClaimedTaskFailedValidateBeforeCall(queue, id, X_TASQUES_WORKER_ID, failure, null);
        Type localVarReturnType = new TypeToken<TaskTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark Task as Failed (asynchronously)
     * Marks a claimed Task as failed.
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param failure The request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Task is not currently claimed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Worker currently has not claimed the Task </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markClaimedTaskFailedAsync(String queue, String id, String X_TASQUES_WORKER_ID, TaskFailure failure, final ApiCallback<TaskTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = markClaimedTaskFailedValidateBeforeCall(queue, id, X_TASQUES_WORKER_ID, failure, _callback);
        Type localVarReturnType = new TypeToken<TaskTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportOnClaimedTask
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param newReport The request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Task is not currently claimed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Worker currently has not claimed the Task </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportOnClaimedTaskCall(String queue, String id, String X_TASQUES_WORKER_ID, TaskNewReport newReport, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = newReport;

        // create path and map variables
        String localVarPath = "/tasques/reports/{queue}/{id}"
            .replaceAll("\\{" + "queue" + "\\}", localVarApiClient.escapeString(queue.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_TASQUES_WORKER_ID != null) {
            localVarHeaderParams.put("X-TASQUES-WORKER-ID", localVarApiClient.parameterToString(X_TASQUES_WORKER_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportOnClaimedTaskValidateBeforeCall(String queue, String id, String X_TASQUES_WORKER_ID, TaskNewReport newReport, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'queue' is set
        if (queue == null) {
            throw new ApiException("Missing the required parameter 'queue' when calling reportOnClaimedTask(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reportOnClaimedTask(Async)");
        }
        
        // verify the required parameter 'X_TASQUES_WORKER_ID' is set
        if (X_TASQUES_WORKER_ID == null) {
            throw new ApiException("Missing the required parameter 'X_TASQUES_WORKER_ID' when calling reportOnClaimedTask(Async)");
        }
        
        // verify the required parameter 'newReport' is set
        if (newReport == null) {
            throw new ApiException("Missing the required parameter 'newReport' when calling reportOnClaimedTask(Async)");
        }
        

        okhttp3.Call localVarCall = reportOnClaimedTaskCall(queue, id, X_TASQUES_WORKER_ID, newReport, _callback);
        return localVarCall;

    }

    /**
     * Reports on a Task
     * Reports in on a claimed Task.
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param newReport The request body (required)
     * @return TaskTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Task is not currently claimed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Worker currently has not claimed the Task </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public TaskTask reportOnClaimedTask(String queue, String id, String X_TASQUES_WORKER_ID, TaskNewReport newReport) throws ApiException {
        ApiResponse<TaskTask> localVarResp = reportOnClaimedTaskWithHttpInfo(queue, id, X_TASQUES_WORKER_ID, newReport);
        return localVarResp.getData();
    }

    /**
     * Reports on a Task
     * Reports in on a claimed Task.
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param newReport The request body (required)
     * @return ApiResponse&lt;TaskTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Task is not currently claimed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Worker currently has not claimed the Task </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskTask> reportOnClaimedTaskWithHttpInfo(String queue, String id, String X_TASQUES_WORKER_ID, TaskNewReport newReport) throws ApiException {
        okhttp3.Call localVarCall = reportOnClaimedTaskValidateBeforeCall(queue, id, X_TASQUES_WORKER_ID, newReport, null);
        Type localVarReturnType = new TypeToken<TaskTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reports on a Task (asynchronously)
     * Reports in on a claimed Task.
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param newReport The request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Task is not currently claimed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Worker currently has not claimed the Task </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportOnClaimedTaskAsync(String queue, String id, String X_TASQUES_WORKER_ID, TaskNewReport newReport, final ApiCallback<TaskTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportOnClaimedTaskValidateBeforeCall(queue, id, X_TASQUES_WORKER_ID, newReport, _callback);
        Type localVarReturnType = new TypeToken<TaskTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unclaimExistingTask
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Task is not currently claimed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Worker currently has not claimed the Task </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unclaimExistingTaskCall(String queue, String id, String X_TASQUES_WORKER_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasques/claims/{queue}/{id}"
            .replaceAll("\\{" + "queue" + "\\}", localVarApiClient.escapeString(queue.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_TASQUES_WORKER_ID != null) {
            localVarHeaderParams.put("X-TASQUES-WORKER-ID", localVarApiClient.parameterToString(X_TASQUES_WORKER_ID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unclaimExistingTaskValidateBeforeCall(String queue, String id, String X_TASQUES_WORKER_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'queue' is set
        if (queue == null) {
            throw new ApiException("Missing the required parameter 'queue' when calling unclaimExistingTask(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unclaimExistingTask(Async)");
        }
        
        // verify the required parameter 'X_TASQUES_WORKER_ID' is set
        if (X_TASQUES_WORKER_ID == null) {
            throw new ApiException("Missing the required parameter 'X_TASQUES_WORKER_ID' when calling unclaimExistingTask(Async)");
        }
        

        okhttp3.Call localVarCall = unclaimExistingTaskCall(queue, id, X_TASQUES_WORKER_ID, _callback);
        return localVarCall;

    }

    /**
     * Unclaims a Task
     * Unclaims a claimed Task.
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @return TaskTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Task is not currently claimed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Worker currently has not claimed the Task </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public TaskTask unclaimExistingTask(String queue, String id, String X_TASQUES_WORKER_ID) throws ApiException {
        ApiResponse<TaskTask> localVarResp = unclaimExistingTaskWithHttpInfo(queue, id, X_TASQUES_WORKER_ID);
        return localVarResp.getData();
    }

    /**
     * Unclaims a Task
     * Unclaims a claimed Task.
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @return ApiResponse&lt;TaskTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Task is not currently claimed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Worker currently has not claimed the Task </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskTask> unclaimExistingTaskWithHttpInfo(String queue, String id, String X_TASQUES_WORKER_ID) throws ApiException {
        okhttp3.Call localVarCall = unclaimExistingTaskValidateBeforeCall(queue, id, X_TASQUES_WORKER_ID, null);
        Type localVarReturnType = new TypeToken<TaskTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unclaims a Task (asynchronously)
     * Unclaims a claimed Task.
     * @param queue The Queue of the Task (required)
     * @param id The id of the Task (required)
     * @param X_TASQUES_WORKER_ID Worker ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Task is not currently claimed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Worker currently has not claimed the Task </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unclaimExistingTaskAsync(String queue, String id, String X_TASQUES_WORKER_ID, final ApiCallback<TaskTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = unclaimExistingTaskValidateBeforeCall(queue, id, X_TASQUES_WORKER_ID, _callback);
        Type localVarReturnType = new TypeToken<TaskTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
