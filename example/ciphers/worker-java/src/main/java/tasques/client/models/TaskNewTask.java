/*
 * Tasques API
 * A Task queue backed by Elasticsearch
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package tasques.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * TaskNewTask
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-02-10T20:22:14.162+09:00[Asia/Tokyo]")
public class TaskNewTask {
  public static final String SERIALIZED_NAME_ARGS = "args";
  @SerializedName(SERIALIZED_NAME_ARGS)
  private Object args;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private Object context;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_PROCESSING_TIMEOUT = "processing_timeout";
  @SerializedName(SERIALIZED_NAME_PROCESSING_TIMEOUT)
  private String processingTimeout;

  public static final String SERIALIZED_NAME_QUEUE = "queue";
  @SerializedName(SERIALIZED_NAME_QUEUE)
  private String queue;

  public static final String SERIALIZED_NAME_RETRY_TIMES = "retry_times";
  @SerializedName(SERIALIZED_NAME_RETRY_TIMES)
  private Integer retryTimes;

  public static final String SERIALIZED_NAME_RUN_AT = "run_at";
  @SerializedName(SERIALIZED_NAME_RUN_AT)
  private OffsetDateTime runAt;


  public TaskNewTask args(Object args) {
    
    this.args = args;
    return this;
  }

   /**
   * Get args
   * @return args
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getArgs() {
    return args;
  }


  public void setArgs(Object args) {
    this.args = args;
  }


  public TaskNewTask context(Object context) {
    
    this.context = context;
    return this;
  }

   /**
   * Get context
   * @return context
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getContext() {
    return context;
  }


  public void setContext(Object context) {
    this.context = context;
  }


  public TaskNewTask kind(String kind) {
    
    this.kind = kind;
    return this;
  }

   /**
   * Get kind
   * @return kind
  **/
  @ApiModelProperty(example = "sayHello", required = true, value = "")

  public String getKind() {
    return kind;
  }


  public void setKind(String kind) {
    this.kind = kind;
  }


  public TaskNewTask priority(Integer priority) {
    
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPriority() {
    return priority;
  }


  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public TaskNewTask processingTimeout(String processingTimeout) {
    
    this.processingTimeout = processingTimeout;
    return this;
  }

   /**
   * Get processingTimeout
   * @return processingTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "30m", value = "")

  public String getProcessingTimeout() {
    return processingTimeout;
  }


  public void setProcessingTimeout(String processingTimeout) {
    this.processingTimeout = processingTimeout;
  }


  public TaskNewTask queue(String queue) {
    
    this.queue = queue;
    return this;
  }

   /**
   * Get queue
   * @return queue
  **/
  @ApiModelProperty(example = "run-later", required = true, value = "")

  public String getQueue() {
    return queue;
  }


  public void setQueue(String queue) {
    this.queue = queue;
  }


  public TaskNewTask retryTimes(Integer retryTimes) {
    
    this.retryTimes = retryTimes;
    return this;
  }

   /**
   * Get retryTimes
   * @return retryTimes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "")

  public Integer getRetryTimes() {
    return retryTimes;
  }


  public void setRetryTimes(Integer retryTimes) {
    this.retryTimes = retryTimes;
  }


  public TaskNewTask runAt(OffsetDateTime runAt) {
    
    this.runAt = runAt;
    return this;
  }

   /**
   * Get runAt
   * @return runAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getRunAt() {
    return runAt;
  }


  public void setRunAt(OffsetDateTime runAt) {
    this.runAt = runAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskNewTask taskNewTask = (TaskNewTask) o;
    return Objects.equals(this.args, taskNewTask.args) &&
        Objects.equals(this.context, taskNewTask.context) &&
        Objects.equals(this.kind, taskNewTask.kind) &&
        Objects.equals(this.priority, taskNewTask.priority) &&
        Objects.equals(this.processingTimeout, taskNewTask.processingTimeout) &&
        Objects.equals(this.queue, taskNewTask.queue) &&
        Objects.equals(this.retryTimes, taskNewTask.retryTimes) &&
        Objects.equals(this.runAt, taskNewTask.runAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(args, context, kind, priority, processingTimeout, queue, retryTimes, runAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskNewTask {\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    processingTimeout: ").append(toIndentedString(processingTimeout)).append("\n");
    sb.append("    queue: ").append(toIndentedString(queue)).append("\n");
    sb.append("    retryTimes: ").append(toIndentedString(retryTimes)).append("\n");
    sb.append("    runAt: ").append(toIndentedString(runAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

